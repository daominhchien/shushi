document.addEventListener('DOMContentLoaded', function() {
    const openModalButton = document.getElementById('openModalButton');
    const modalOverlay = document.getElementById('modalOverlay');
    const addEmployeeButton = document.getElementById('addPlaneButton');
    const closeModalButton = document.getElementById('closeModalButton'); // N√∫t ƒë√≥ng modal
    const saveButton = document.querySelector('.save-button');
    const formModal = document.querySelector('.modal');

    // Thi·∫øt l·∫≠p s·ª± ki·ªán nh·∫•n n√∫t m·ªü modal
    openModalButton.addEventListener('click', function() {
        modalOverlay.style.display = 'flex'; // Hi·ªÉn th·ªã modal v·ªõi display: flex;
        document.body.style.overflow = 'hidden'; // NgƒÉn cu·ªôn trang khi modal hi·ªÉn th·ªã
    });

    // Thi·∫øt l·∫≠p s·ª± ki·ªán nh·∫•n n√∫t th√™m nh√¢n vi√™n
    addEmployeeButton.addEventListener('click', function() {  
        addNhanVien();
        modalOverlay.style.display = 'none'; // ƒê√≥ng modal
        document.body.style.overflow = 'auto'; // B·∫≠t l·∫°i cu·ªôn trang
    });

    // S·ª± ki·ªán nh·∫•n n√∫t ƒë√≥ng modal (X)
    closeModalButton.addEventListener('click', function() {
       modalOverlay.style.display = 'none'; // ƒê√≥ng modal
       document.body.style.overflow = 'auto'; // B·∫≠t l·∫°i cu·ªôn trang
        // ƒê·∫∑t l·∫°i gi√° tr·ªã c·ªßa c√°c √¥ nh·∫≠p li·ªáu
        resetForm();
        // Hi·ªÉn th·ªã n√∫t Th√™m v√† ·∫©n n√∫t L∆∞u
        document.querySelector('#addPlaneButton').style.display = 'inline-block';
        document.querySelector('.save-button').style.display = 'none';
        // ƒê·∫∑t l·∫°i ti√™u ƒë·ªÅ modal
        modalTitle.textContent = 'Th√™m Nh√¢n Vi√™n';
        formModal.style.backgroundColor = ''; // X√≥a l·ªõp edit-mode
    });

    // S·ª± ki·ªán nh·∫•n n√∫t l∆∞u thay ƒë·ªïi
    saveButton.addEventListener('click', function() {
        //saveNhanVien();
        modalOverlay.style.display = 'none'; // ƒê√≥ng modal
        document.body.style.overflow = 'auto'; // B·∫≠t l·∫°i cu·ªôn trang
    });
});

function resetForm() {
  
    document.querySelector('select[id="MaBoPhan"]').value = '';
    document.querySelector('select[id="MaChiNhanh"]').value = '';
    document.querySelector('input[id="HoTen"]').value = '';
    document.querySelector('input[id="NgaySinh"]').value = '';
    document.querySelector('input[id="GioiTinh"]').value = '';
    document.querySelector('input[id="Luong"]').value = '';
    document.querySelector('input[id="SDT"]').value = '';
    document.querySelector('input[id="DiaChi"]').value = '';
}

// 2. H√†m load d·ªØ li·ªáu v√†o select
async function fetchAllData() {
    try {
        // G·ª≠i request ƒë·∫øn c√°c endpoint
        const chiNhanhResponse = fetch('http://localhost:3000/chinhanh');
        const boPhanResponse = fetch('http://localhost:3000/bophan');

        // Ch·ªù t·∫•t c·∫£ c√°c request ho√†n th√†nh
        const [chiNhanhData, boPhanData] = await Promise.all([
            chiNhanhResponse.then(res => res.json()),
            boPhanResponse.then(res => res.json())
        ]);

        return {
            chinhanh: chiNhanhData,
            bophan: boPhanData
        };
    } catch (error) {
        console.error('Error fetching data:', error);
        throw error; // QuƒÉng l·ªói ƒë·ªÉ x·ª≠ l√Ω ph√≠a tr√™n (n·∫øu c·∫ßn)
    }
}

// H√†m hi·ªÉn th·ªã d·ªØ li·ªáu l√™n select
function populateSelect(selectId, data, labelKey, valueKey) {
    const selectElement = document.getElementById(selectId);

    // X√≥a c√°c t√πy ch·ªçn c≈© (n·∫øu c√≥)
    selectElement.innerHTML = '<option value="">-- Ch·ªçn --</option>';

    // Th√™m d·ªØ li·ªáu m·ªõi v√†o select
    data.forEach(item => {
        const option = document.createElement('option');
        option.value = item[valueKey];
        option.textContent = item[labelKey];
        selectElement.appendChild(option);
    });
}

// H√†m ch√≠nh: L·∫•y d·ªØ li·ªáu v√† hi·ªÉn th·ªã
async function init() {
    try {
        const { chinhanh, bophan } = await fetchAllData();

        // Hi·ªÉn th·ªã d·ªØ li·ªáu l√™n c√°c select box
        populateSelect('MaChiNhanh', chinhanh, 'TenChiNhanh', 'id'); // Thay 'TenChiNhanh' v√† 'ID' theo c·∫•u tr√∫c d·ªØ li·ªáu c·ªßa b·∫°n
        populateSelect('MaBoPhan', bophan, 'TenBoPhan', 'id'); // Thay 'TenBoPhan' v√† 'ID' theo c·∫•u tr√∫c d·ªØ li·ªáu c·ªßa b·∫°n
    } catch (error) {
        console.error('Error initializing data:', error);
    }
}

init();

var nhanVienAPI = 'http://localhost:3000/nhanvien';

document.addEventListener('DOMContentLoaded', function () {
    start();
});

function start(){
    getNhanVien(renderNhanVien);
}

// L·∫•y danh s√°ch nh√¢n vi√™n -> g·ª≠i API
function getNhanVien(callback){
    fetch(nhanVienAPI)
    .then(function(response) {
        if (!response.ok) {
            throw new Error('Network response was not ok ' + response.statusText);
        }
        return response.json();
    })
    .then(callback)
    .catch(error => console.error('Error fetching nhanvien:', error));
}

// T·∫°o nh√¢n vi√™n m·ªõi -> g·ª≠i API
function createNhanVien(data, callback){
    var options = {
        method: 'POST',
        body: JSON.stringify(data),
        headers: {
            "Content-Type": "application/json",
        }
    };

    fetch(nhanVienAPI, options)
        .then(function(response){
            if (!response.ok) {
                throw new Error('Network response was not ok ' + response.statusText);
            }
            return response.json();
        })
        .then(callback)
        .catch(error => console.error('Error creating nhanvien:', error));
}

// X√≥a nh√¢n vi√™n -> g·ª≠i API
function deleteNhanVien(id, callback){
    var options = {
        method: 'DELETE',
        headers: {
            "Content-Type": "application/json",
        }
    };

    fetch(nhanVienAPI + '/' + id, options)
        .then(function(response){
            if (!response.ok) {
                throw new Error('Network response was not ok ' + response.statusText);
            }
            return response.json();
        })
        .then(function(){
            var nhanVienItem = document.querySelector('.nhanvien-item-' + id);
            if(nhanVienItem){
                nhanVienItem.remove();
            }
        })
        .catch(error => console.error('Error deleting nhanvien:', error));
}

// S·ª≠a th√¥ng tin nh√¢n vi√™n -> g·ª≠i API
function updateNhanVien(id, data, callback) {
    var options = {
        method: 'PUT',
        body: JSON.stringify(data),
        headers: {
            "Content-Type": "application/json",
        }
    };

    fetch(nhanVienAPI + '/' + id, options)
        .then(function(response) {
            if (!response.ok) {
                throw new Error('Network response was not ok ' + response.statusText);
            }
            return response.json();
        })
        .then(callback)
        .catch(error => console.error('Error updating nhanvien:', error));
}

// Hi·ªÉn th·ªã danh s√°ch nh√¢n vi√™n v√† giao di·ªán
function renderNhanVien(list_nhanvien){
    var listNhanVien = document.querySelector('tbody');
    if (!listNhanVien) {
        console.error('No tbody element found');
        return;
    }

    var htmls = list_nhanvien.map(function(nhanvien, index) {
        return `<tr class="nhanvien-item-${nhanvien.id}">
                    <td>${index + 1}</td>
                    <td>${nhanvien.id}</td>
                    <td>${nhanvien.MaBoPhan}</td>
                    <td>${nhanvien.MaChiNhanh}</td>
                    <td>${nhanvien.HoTen}</td>
                    <td>${nhanvien.NgaySinh}</td>
                    <td>${nhanvien.GioiTinh}</td>
                    <td>${nhanvien.Luong}</td>
                    <td>${nhanvien.SDT}</td>
                    <td>${nhanvien.DiaChi}</td>
                    <td class="edit-icons">
                        <button onclick="editNhanVien('${nhanvien.id}')">‚úé</button>
                        <button onclick="deleteNhanVien('${nhanvien.id}', getNhanVien(renderNhanVien))">üóëÔ∏è</button>
                    </td>
                </tr>`;
    }).join('');

    listNhanVien.innerHTML = htmls;
    console.log('Rendered HTML:', htmls);
}

// Ho·∫°t ƒë·ªông Th√™m nh√¢n vi√™n v√†o API v√† c·∫≠p nh·∫≠t giao di·ªán
function addNhanVien() {
  
    var MaBoPhanInput = document.querySelector('select[id="MaBoPhan"]');
    var MaChiNhanhInput = document.querySelector('select[id="MaChiNhanh"]');
    var HoTenInput = document.querySelector('input[id="HoTen"]');
    var NgaySinhInput = document.querySelector('input[id="NgaySinh"]');
    var GioiTinhInput = document.querySelector('input[id="GioiTinh"]');
    var LuongInput = document.querySelector('input[id="Luong"]');
    var SDTInput = document.querySelector('input[id="SDT"]');
    var DiaChiInput = document.querySelector('input[id="DiaChi"]');

    // Ki·ªÉm tra n·∫øu t·∫•t c·∫£ c√°c input t·ªìn t·∫°i v√† kh√¥ng tr·ªëng
    if ( MaBoPhanInput && MaChiNhanhInput && HoTenInput && NgaySinhInput && GioiTinhInput && LuongInput && SDTInput && DiaChiInput) {
        
        var MaBoPhan = MaBoPhanInput.value.trim();
        var MaChiNhanh = MaChiNhanhInput.value.trim();
        var HoTen = HoTenInput.value.trim();
        var NgaySinh = NgaySinhInput.value.trim();
        var GioiTinh = GioiTinhInput.value.trim();
        var Luong = LuongInput.value.trim();
        var SDT = SDTInput.value.trim();
        var DiaChi = DiaChiInput.value.trim();

        if ( MaBoPhan === "" || MaChiNhanh === "" || HoTen === "" || NgaySinh === "" || GioiTinh === "" || Luong === "" || SDT === "" || DiaChi === "") {
            alert("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin v√†o t·∫•t c·∫£ c√°c √¥.");
            return; // D·ª´ng th·ª±c hi·ªán n·∫øu c√≥ √¥ tr·ªëng
        }
    
        var data = {
           
            MaBoPhan: MaBoPhan,
            MaChiNhanh: MaChiNhanh,
            HoTen: HoTen,
            NgaySinh: NgaySinh,
            GioiTinh: GioiTinh,
            Luong: Luong,
            SDT: SDT,
            DiaChi: DiaChi
        };
    
        // G·ªçi h√†m t·∫°o nh√¢n vi√™n v√† c·∫≠p nh·∫≠t danh s√°ch sau khi th√™m th√†nh c√¥ng
        createNhanVien(data, function() {
            getNhanVien(renderNhanVien);  // C·∫≠p nh·∫≠t danh s√°ch nh√¢n vi√™n
            resetForm();
        });
    }
}

// Ho·∫°t ƒë·ªông S·ª≠a th√¥ng tin nh√¢n vi√™n
function editNhanVien(id) {
    fetch(nhanVienAPI)
        .then(function(response) {
            return response.json();
        })
        .then(function(nhanviens) {
            var nhanvien = nhanviens.find(function(nv) {
                return nv.id === id;
            });

            if (nhanvien) {
           
                var MaBoPhanInput = document.querySelector('select[id="MaBoPhan"]');
                var MaChiNhanhInput = document.querySelector('select[id="MaChiNhanh"]');
                var HoTenInput = document.querySelector('input[id="HoTen"]');
                var NgaySinhInput = document.querySelector('input[id="NgaySinh"]');
                var GioiTinhInput = document.querySelector('input[id="GioiTinh"]');
                var LuongInput = document.querySelector('input[id="Luong"]');
                var SDTInput = document.querySelector('input[id="SDT"]');
                var DiaChiInput = document.querySelector('input[id="DiaChi"]');
                
                var themBtn = document.querySelector('#addPlaneButton');
                var formContainer = document.querySelector('#modalOverlay'); // Updated to match the modal overlay
                var saveBtn = document.querySelector('.save-button');
                var modalTitle = document.querySelector('.modal h3'); // Ti√™u ƒë·ªÅ c·ªßa modal
                var formModal = document.querySelector('.modal');
                // ƒêi·ªÅn gi√° tr·ªã hi·ªán t·∫°i v√†o c√°c √¥ nh·∫≠p li·ªáu
            
                MaBoPhanInput.value = nhanvien.MaBoPhan;
                MaChiNhanhInput.value = nhanvien.MaChiNhanh;
                HoTenInput.value = nhanvien.HoTen;
                NgaySinhInput.value = nhanvien.NgaySinh;
                GioiTinhInput.value = nhanvien.GioiTinh;
                LuongInput.value = nhanvien.Luong;
                SDTInput.value = nhanvien.SDT;
                DiaChiInput.value = nhanvien.DiaChi;

                // Thay ƒë·ªïi ti√™u ƒë·ªÅ modal
                modalTitle.textContent = 'Ch·ªânh s·ª≠a';
                formModal.style.backgroundColor = '#e8f5e9'; // M√†u n·ªÅn xanh nh·∫°t

                // Hi·ªÉn th·ªã modal v√† ·∫©n n√∫t Th√™m
                formContainer.style.display = 'flex';
                document.body.style.overflow = 'hidden'; // NgƒÉn cu·ªôn trang khi modal hi·ªÉn th·ªã
                themBtn.style.display = 'none';
                saveBtn.style.display = 'inline-block';

                // Th√™m s·ª± ki·ªán cho n√∫t l∆∞u thay ƒë·ªïi
                saveBtn.onclick = function() {
                
                    var MaBoPhan = MaBoPhanInput.value.trim();
                    var MaChiNhanh = MaChiNhanhInput.value.trim();
                    var HoTen = HoTenInput.value.trim();
                    var NgaySinh = NgaySinhInput.value.trim();
                    var GioiTinh = GioiTinhInput.value.trim();
                    var Luong = LuongInput.value.trim();
                    var SDT = SDTInput.value.trim();
                    var DiaChi = DiaChiInput.value.trim();

                    if (MaBoPhan === "" || MaChiNhanh === "" || HoTen === "" || NgaySinh === "" || GioiTinh === "" || Luong === "" || SDT === "" || DiaChi === "") {
                        alert("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin v√†o t·∫•t c·∫£ c√°c √¥.");
                        return;
                    }

                    var updatedNhanVien = {
                      
                        MaBoPhan: MaBoPhan,
                        MaChiNhanh: MaChiNhanh,
                        HoTen: HoTen,
                        NgaySinh: NgaySinh,
                        GioiTinh: GioiTinh,
                        Luong: Luong,
                        SDT: SDT,
                        DiaChi: DiaChi
                    };

                    updateNhanVien(id, updatedNhanVien, function() {
                        getNhanVien(renderNhanVien);
                        resetForm();

                        // ƒê·∫∑t l·∫°i ti√™u ƒë·ªÅ modal
                        modalTitle.textContent = 'Th√™m Nh√¢n Vi√™n';
                        saveBtn.style.display = 'none'; 
                        themBtn.style.display = 'inline-block'; 
                        formContainer.style.display = 'none';
                        document.body.style.overflow = 'auto'; // B·∫≠t l·∫°i cu·ªôn trang
                        
                        // X√≥a l·ªõp edit-mode
                        formModal.style.backgroundColor = '';
                    });
                };
            }
        })
        .catch(error => console.error('Error editing nhanvien:', error));
}

// T√¨m ki·∫øm nh√¢n vi√™n
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('searchInput');

    searchInput.addEventListener('input', function() {
        const searchTerm = searchInput.value.trim().toLowerCase();
        if (searchTerm) {
            searchNhanVien(searchTerm);
        } else {
            getNhanVien(renderNhanVien); // Hi·ªÉn th·ªã l·∫°i danh s√°ch ƒë·∫ßy ƒë·ªß n·∫øu √¥ t√¨m ki·∫øm tr·ªëng
        }
    });
});

function searchNhanVien(searchTerm) {
    fetch(nhanVienAPI)
        .then(function(response) {
            return response.json();
        })
        .then(function(nhanviens) {
            const filteredNhanViens = nhanviens.filter(function(nhanvien) {
                return nhanvien.MaNhanVien.toLowerCase().includes(searchTerm);
            });
            renderNhanVien(filteredNhanViens);
        })
        .catch(error => console.error('Error searching nhanvien:', error));
}